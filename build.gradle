plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = 'io.github.spencerpark'
version = '1.4.4'

// Java configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'Sonatype Snapshots'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        content {
            // only for SNAPSHOT versions
            includeGroup 'io.github.spencerpark'
        }
    }
}

// Dependency versions
def versions = [
    jupyterKernel: '2.3.0',
    gson: '2.10.1',
    mavenResolver: '1.8.2',
    mavenProvider: '3.8.6',
    logback: '1.5.7',
    junit: '4.13.2'
]

dependencies {
    implementation("io.github.spencerpark:jupyter-jvm-basekernel:${versions.jupyterKernel}") {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    implementation "com.google.code.gson:gson:${versions.gson}"

    // Maven resolver dependencies
    implementation("org.apache.maven:maven-resolver-provider:${versions.mavenProvider}") {
        exclude group: 'org.apache.maven.resolver'
    }
    implementation "org.apache.maven.resolver:maven-resolver-impl:${versions.mavenResolver}"
    implementation "org.apache.maven.resolver:maven-resolver-connector-basic:${versions.mavenResolver}"
    implementation "org.apache.maven.resolver:maven-resolver-transport-file:${versions.mavenResolver}"
    implementation "org.apache.maven.resolver:maven-resolver-transport-http:${versions.mavenResolver}"
    implementation "org.apache.maven.resolver:maven-resolver-transport-classpath:${versions.mavenResolver}"

    implementation "ch.qos.logback:logback-classic:${versions.logback}"
    testImplementation "junit:junit:${versions.junit}"

    // JavaParser for Java source code analysis
    implementation 'com.github.javaparser:javaparser-core:3.25.8'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    // PlantUML for diagrams
    implementation 'net.sourceforge.plantuml:plantuml:1.2024.1'
    // ClassGraph for classpath scanning
    implementation 'io.github.classgraph:classgraph:4.8.168'
    // Lombok for annotations processing
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}


// Build configuration
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
    options.deprecation = true
    options.release = 21
}

// Shadow JAR configuration
shadowJar {
    archiveClassifier.set('all')
    mergeServiceFiles()
    manifest {
        attributes(
            'Main-Class': 'io.github.spencerpark.ijava.IJava',
            'Implementation-Version': project.version,
            'Built-By': System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By': "Gradle ${gradle.gradleVersion}",
            'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        )
    }
    // copy build.gradle to shadowed jar
    from("./") {
        include 'build.gradle'
    }    
}

// Distribution package
tasks.register('packDist', Zip) {
    description = 'Creates distribution package'
    group = 'distribution'
    
    archiveFileName = "${project.name}-latest.zip"
    
    from(layout.buildDirectory.dir("resources/main")) {
        include "install.py"
    }
    
    from(layout.buildDirectory.dir("libs")) {
        include "*-all.jar"
        into "java"
        rename { filename ->
            filename.replace("-all.jar", ".jar")
        }
    }
    
    from(layout.buildDirectory.dir("resources/main")) {
        include "kernel.json"
        into "java"
    }
    
    // Ensure shadowJar task runs before packaging
    dependsOn shadowJar
    dependsOn processResources
}

// Dependency download task
tasks.register('downloadDependencies') {
    description = 'Downloads all dependencies'
    group = 'build setup'
    
    doLast {
        configurations.all { configuration ->
            if (configuration.canBeResolved) {
                configuration.resolve()
            }
        }
    }
}

// Build finalization
build.finalizedBy(packDist)